name: Release
on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest]

    env:
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REACT_APP_IAH_ENDPOINT: "https://dev.benweare.co.uk"
      TUARI_SIG_UBUNTU_PATH: ""
      TUARI_SIG_WINDOWS_PATH: ""
      GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
      GITHUB_REPO_URL: "https://github.com/incendiarybean/isaac-achievement-hunter"

    runs-on: ${{ matrix.platform }}
    outputs:
      WINDOWS_SIG: ${{ steps.WINDOWS_SIG.outputs.WINDOWS_SIG }}
      UBUNTU_SIG: ${{ steps.UBUNTU_SIG.outputs.UBUNTU_SIG }}
      APP_VERSION: ${{ steps.PACKAGE.outputs.APP_VERSION }}
    steps:
      - name: üõí Checkout Repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Configuring Node Version and Cache
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "npm"

      - name: üì¶ Install the NPM Packages
        run: npm install

      - name: üîé Get Package version
        id: PACKAGE
        run: |
          echo "REACT_APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: ‚öôÔ∏è Configuring Rust
        uses: dtolnay/rust-toolchain@stable

      - name: ‚öôÔ∏è Configuring Rust Cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: ‚¨áÔ∏è Download and Install Ubuntu dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: ‚öíÔ∏è Build the Tauri Application
        uses: tauri-apps/tauri-action@v0
        with:
          tagName: v__VERSION__
          releaseName: "[${{ secrets.RELEASE_TYPE }}] __VERSION__ - Isaac Achievement Hunter"
          releaseBody: "To be updated with a Changelog!"
          releaseDraft: true
          prerelease: false

      - name: üî¨ Get Linux Application signature
        id: UBUNTU_SIG
        if: matrix.platform == 'ubuntu-latest'
        run: |
          echo "UBUNTU_SIG=$(cat "./src-tauri/target/release/bundle/appimage/Isaac Achievement Hunter_${{ env.REACT_APP_VERSION }}_amd64.AppImage.tar.gz")" >> $GITHUB_OUTPUT

      - name: üî¨ Get Windows Application signature
        id: WINDOWS_SIG
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          echo "WINDOWS_SIG=$(cat "./src-tauri/target/release/bundle/msi/Isaac Achievement Hunter_${{ env.REACT_APP_VERSION }}_x64_en-US.msi.zip.sig")" >> $GITHUB_OUTPUT

  updater:
    runs-on: "ubuntu-latest"
    needs: release
    steps:
      - name: üåç Configure GIST Environment Requirements
        run: |
          echo "WINDOWS_URL=https://github.com/incendiarybean/isaac-achievement-hunter/releases/download/v${{ needs.release.outputs.APP_VERSION }}_x64_en-US.msi.zip" >> $GITHUB_ENV
          echo "UBUNTU_URL=https://github.com/incendiarybean/isaac-achievement-hunter/releases/download/v${{ needs.release.outputs.APP_VERSION }}_amd64.AppImage.tar.gz" >> $GITHUB_ENV
          echo "NOTES=https://github.com/incendiarybean/isaac-achievement-hunter/releases/tag/v${{ needs.release.outputs.APP_VERSION }}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +"%Y-%m-%dT%H:%M:%S%:z")" >> $GITHUB_ENV
          echo "GIST_ID=${{ secrets.GIST_ID }}" >> $GITHUB_ENV

      - name: ‚öíÔ∏è Write Auto-Updater JSON File
        run: |
          echo '{"version":"${{ needs.release.outputs.APP_VERSION }}","notes":"https://github.com/incendiarybean/isaac-achievement-hunter/releases/tag/v${{ needs.release.outputs.APP_VERSION }}","pub_date":"${{ env.TIMESTAMP }}","platforms":{"windows-x86_64":{"signature":"${{ needs.release.outputs.WINDOWS_SIG }}","url":"${{ env.WINDOWS_URL }}"},"linux-x86_64":{"signature":"${{ needs.release.outputs.UBUNTU_SIG }}","url":"${{ env.UBUNTU_URL }}"}}}' >> ./gist.json
          echo "GIST_DATA=$(cat ./gist.json | jq "@json")" >> $GITHUB_ENV

      - name: ‚¨ÜÔ∏è Upload JSON to GIST
        run: |
          curl -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GIST_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/gists/d3870a1b591ff30a9ea9f26f9a7e6b3c" \
          -d '{"description":"test!","public":true,"files":{"iah-au.json":{"content":${{ env.GIST_DATA }}}}}'
